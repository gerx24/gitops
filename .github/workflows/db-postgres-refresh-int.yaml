name: db refresh int [gerx24_core]


on:
  workflow_dispatch:
    inputs:
      database:
        description: "gerx24-int-x"
        required: true
        type: string
      environment:
        description: "environment"
        default: int
        type: string
      date:
        description: "Backup date format e.g 20250512 year/month/day"
        required: true
        type: string

  workflow_call:
    inputs:
      database:
        description: "gerx24-int-x"
        required: true
        type: string
      environment:
        description: "environment"
        default: int
        type: string
      date:
        description: "Backup date format e.g 20250512 year/month/day"
        required: true
        type: string

jobs:
  db-refresh-int:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: üîë Get AWS Creds
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::183903597125:role/postgres-db-int-refresh

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ inputs.environment }}-usva-pincer-project --region us-east-1

      - name: Deploy Job
        run: |
          export DB_NAME=${{ inputs.database }}
          export ENV=${{ inputs.environment }}
          export DATE=${{ inputs.date }}
          export PGPASSWORD=${{ secrets.PGPASSWORD }}

          cat <<EOF | envsubst | kubectl apply -f -
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: db-refresh-job-$DB_NAME
            namespace: gerx24-db-refresh
            labels:
              app: db-refresh-job
          spec:
            ttlSecondsAfterFinished: 300
            template:
              metadata:
                name: db-refresh-job
                labels:
                  app: db-refresh-job
              spec:
                initContainers:
                - name: copying-pgdump
                  image: amazon/aws-cli
                  command:
                    - /bin/sh
                    - -c
                    - |
                      echo "Copying files from elco-int-usva-gerx24-core-pg-backups"
                      aws s3 cp s3://elco-int-usva-gerx24-core-pg-backups/ /pg-dump --recursive
                  volumeMounts:
                    - name: pg-dump
                      mountPath: /pg-dump
                containers:
                - name: db-refresh
                  image: ghcr.io/elc-online/t-shoot/runner:1.0.0
                  env:
                    - name: PGPASSWORD
                      value: "$PGPASSWORD"
                    - name: DB_NAME
                      value: "$DB_NAME"
                    - name: ENV
                      value: "$ENV"
                    - name: DATE
                      value: "$DATE"
                  command: ["/bin/bash", "-c"]
                  args:
                    - |
                      echo "Dropping old database..."
                      PGPASSWORD=$PGPASSWORD psql -h rds-global.gerx24.usva.$ENV.pincer-project.internal -p 5432 -U root -d postgres -c "
                      SELECT pg_terminate_backend(pid)
                      FROM pg_stat_activity
                      WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();"

                      PGPASSWORD=$PGPASSWORD psql -h rds-global.gerx24.usva.$ENV.pincer-project.internal -p 5432 -U root -d postgres -c "DROP DATABASE IF EXISTS $DB_NAME"

                      echo "Creating new database..."
                      PGPASSWORD=$PGPASSWORD psql -h rds-global.gerx24.usva.$ENV.pincer-project.internal -p 5432 -U root -d postgres -c "CREATE DATABASE $DB_NAME;"

                      echo "Restoring database..."
                      PGPASSWORD=$PGPASSWORD psql -h rds-global.gerx24.usva.$ENV.pincer-project.internal -p 5432 -U root -d $DB_NAME -f /pg-dump/gerx24_dump_$DATE.sql

                      echo "Altering schema ownership..."
                      PGPASSWORD=$PGPASSWORD psql -h rds-global.gerx24.usva.$ENV.pincer-project.internal -p 5432 -U root -d $DB_NAME -c "ALTER SCHEMA public OWNER TO gerx24_owner_role; ALTER SCHEMA client_side OWNER TO gerx24_owner_role; ALTER SCHEMA settings OWNER TO gerx24_owner_role;"

                      PGPASSWORD=$PGPASSWORD psql -h rds-global.gerx24.usva.$ENV.pincer-project.internal -p 5432 -U root -d $DB_NAME -f /pg-dump/privileges.sql
                  volumeMounts:
                    - name: pg-dump
                      mountPath: /pg-dump
                volumes:
                - name: pg-dump
                  emptyDir: {}
                imagePullSecrets:
                  - name: ghcr-credentials
                restartPolicy: OnFailure
                tolerations:
                  - effect: NoSchedule
                    key: karpenter-node
                    value: "true"
                serviceAccountName: gerx24-db-refresh
          EOF

      - name: Wait for Job to Succeed [5 minutes check]
        run: |
          echo "Checking status of job db-refresh-job-${{ inputs.database }}"
          for i in {1..30}; do
            STATUS=$(kubectl get job db-refresh-job-${{ inputs.database }} -n gerx24-db-refresh -o jsonpath="{.status.conditions[?(@.type=='Complete')].status}")
            if [[ "$STATUS" == "True" ]]; then
              echo "‚úÖ Job db-refresh-job-${{ inputs.database }} completed successfully."
              exit 0
            fi

            FAILED=$(kubectl get job db-refresh-job-${{ inputs.database }} -n gerx24-db-refresh -o jsonpath="{.status.failed}")
            if [[ "$FAILED" -ge 1 ]]; then
              echo "‚ùå Job db-refresh-job-${{ inputs.database }} failed."
              exit 1
            fi

            echo "‚è≥ Job db-refresh-job-${{ inputs.database }} not complete yet... waiting 10 seconds"
            sleep 10
          done

          echo "‚è∞ Timed out waiting for job to complete."
          exit 1


      - name: Delete Job
        run: |
          kubectl delete job db-refresh-job-${{ inputs.database }} -n gerx24-db-refresh
          echo "Job db-refresh-job-${{ inputs.database }} completed"